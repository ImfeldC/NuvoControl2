/*!

\page pagePersBerichtCI Erfahrungsbericht von Christian Imfeld

Die Arbeit an der hier vorliegenden Diplomarbeit hat mir seht gut gefallen. Ich hatte natürlich einen zusätzlichen <b>Motivationsschub</b>, 
da ich die erstellte Software auch konkret bei mir zu Hause einsetzen kann.

Die von der Schule abgegebene Empfehlung die <b>Diplomarbeit im Team</b> zu erarbeiten, kann ich nur unterstützen. Der gegenseitige Austausch 
an den gemeinsamen Treffen war für mich sehr wertvoll. Wenn man bei einem Problem nicht mehr weiter wusste, hat der Austausch bzw. die Diskussion 
des Problems mit Bernhard immer geholfen eine Lösung zu finden.

Die <b>Projektorganisation</b> hat ebenfalls gut geklappt. Da wir beide in Zug – ganz in der Nähe voneinander - arbeiten, konnten wir die 
regelmässigen Treffen am Dienstag und Donnerstag jeweils gleich in Zug abhalten, dies ersparte uns einen langen Reiseweg für die Treffen.

Von Anfang an benutzen wir ein gemeinsames <b>Source Code Repository</b>. Darin verwalteten wir nicht nur den Source Code sondern auch die 
gemeinsamen Dokumente. Dies erlaubte uns an den Dokumenten zu arbeiten ohne grosse vorherige Absprache, und erübrigte auch das versenden von 
Mails mit dem neuesten Word Dokument, und danach das noch neuere und am Schluss das Neueste.

Zuerst hatten wir nicht geplant einen zentralen <b>Build Server</b> aufzusetzen. Da mich dieses Thema sehr interessiert, habe ich mich in 
dieses Thema eingelesen. Wir verwendeten <b>Cruise Control .NET</b>, installiert auf einer virtuellen Maschine, welche auf meinem privaten 
PC zu Hause läuft. Nachträglich hat sich diese Anfangs-Investition bezahlt gemacht. Anfänglich lief dort nur der eigentliche Build vom 
NuvoControl System. Kontinuierlich wurde die Build Maschine jedoch ausgebaut; mit einem Task zum automatischen bilden der <b>Source Code Dokumentation</b> 
(unter Verwendung von doxygen); weiter mit einem Task zur <b>Konvertierung von Word Dokumenten</b> in HTML und PDF, zwecks Einbindung in die 
Source Code Dokumentation; und zum Schluss mit einem Task zum bilden der finalen <b>Setup CD<b> für die Abgabe.

Ein Ziel unserer Diplomarbeit war die Erstellung der Software mit dem <b>Test-Driven-Design</b> Approach. Speziell der Protokolltreiber 
wurde nach diesem Ansatz implementiert. Die einzelnen Layers wurden jeweils in sich mit Unit Tests getestet. Dazu wurden jeweils spezielle 
Mock-Objekte verwendet, die den darunterliegenden Layer simulierten. Dies erlaubte es den Protokolltreiber ausführlich (und automatisiert!) 
zu testen. Dieses Vorgehen war nicht nur effizient sondern auch erfolgreich. Die ersten Versuche die Hardware direkt anzusteuern (und nicht via Simulator) 
machten wir erst knapp nach vier (von sechs!) Monaten, und sie waren schon beim ersten Versuch erfolgreich. Der zweite Versuch machten wir erst wieder 
im sechsten Monat. Auch dieser Test war erfolgreich, ausser dass wir einen Fehler in der Hardware Spezifikation vom Hersteller gefunden haben. 
Da nützen natürlich die besten Unit Tests nichts, wenn die zugrunde liegende Spezifikation fehlerhaft ist.

Eher ein Lowlight war die Erstellung der automatischen <b>Source Code Dokumentation</b>. Mit schwebte von Anfang an eine automatisierte Lösung vor. 
Wir begnügten uns aber lange Zeit mit dem Dokumentationsstil der von Visual Studio verwendet wird und dachten, dass diese nachher einfach erstellt werden kann.
Die erste Wahl war NDoc. Doch es scheint, dass dieses Open-Source Projekt nicht mehr aktiv betrieben wird. Die Verwendung von Sandcastle (das ist ein 
Tool von Microsoft, und wird als Nachfolger von NDoc präsentiert) war ebenfalls nicht nach meinem Geschmack. Die Verwendung der bekannten Visual Studio 
XML Kommentaren war zwar ok. Das Tool erlaubte aber keine weiterführende Integration von Dokumenten (oder ich weiss nicht wie). Zudem beschränkte sich 
das Tool nur gerade darauf die XML Kommentare zu extrahieren und in eine schöne Form zu bringen. Für mich ist dies ganz klar zu wenig für ein automatisches Tool. 
Schlussendlich haben wir <b>doxygen</b> eingesetzt. Dieses Tool hat zwar (per Default) ein eigenes Format für die XML Kommentare, unterstützt aber 
auch den Visual Studio Style. Zudem erstellt es automatisch Grafiken, welche die Klassenhierarchie, die benutzten Methoden innerhalb einer Methode 
und die Verwendung der Methode von aussen aufzeigt. 

Zwar ist dieses Tool auch nicht das „Gelbe vom Ei“, aber für unsere Zwecke genügend. Ich wünschte mit einer besseren Editiermöglichkeit 
von zusätzlichen Artikeln. Diese müssen jetzt als Textdateien eingebunden werden. Hier wäre zum Beispiel die Integration von Word Dokumenten hilfreich.





*/